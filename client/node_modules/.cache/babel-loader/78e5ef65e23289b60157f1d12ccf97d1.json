{"ast":null,"code":"var _jsxFileName = \"/home/vishnu/proj/ADI/Complete React/twitch_tv/client/src/components/streams/StreamCreate.jsx\";\nimport React, { Component } from 'react';\nimport { Field, formValues, reduxForm } from 'redux-form';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass StreamCreate extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.renderError = _ref => {\n      let {\n        error,\n        touched\n      } = _ref;\n\n      if (touched && error) {\n        /*#__PURE__*/\n        _jsxDEV(\"div\", {\n          className: \"ui error message\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"header\",\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 9,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 8,\n          columnNumber: 13\n        }, this);\n      }\n    };\n\n    this.renderInput = _ref2 => {\n      let {\n        input,\n        label,\n        meta\n      } = _ref2;\n      const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"field error\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...input,\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 17\n        }, this), this.renderError(meta)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 13\n      }, this);\n    };\n  }\n\n  onSubmit(formValues) {\n    console.log(formValues);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      className: \"ui form error\",\n      children: [/*#__PURE__*/_jsxDEV(Field, {\n        name: \"title\",\n        component: this.renderInput,\n        label: \"Enter Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Field, {\n        name: \"description\",\n        component: this.renderInput,\n        label: \"Enter Description\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"ui button primary\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\n;\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = \"You must enter a valid title\";\n  }\n\n  if (!formValues.description) {\n    errors.description = \"You must enter a valid description\";\n  }\n\n  return errors;\n};\n\nexport default reduxForm({\n  form: 'streamCreate',\n  validate\n})(StreamCreate);","map":{"version":3,"sources":["/home/vishnu/proj/ADI/Complete React/twitch_tv/client/src/components/streams/StreamCreate.jsx"],"names":["React","Component","Field","formValues","reduxForm","StreamCreate","renderError","error","touched","renderInput","input","label","meta","className","onSubmit","console","log","render","props","handleSubmit","validate","errors","title","description","form"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,EAAgBC,UAAhB,EAA4BC,SAA5B,QAA6C,YAA7C;;;AAEA,MAAMC,YAAN,SAA2BJ,SAA3B,CAAqC;AAAA;AAAA;;AAAA,SAEjCK,WAFiC,GAEnB,QAAwB;AAAA,UAAvB;AAAEC,QAAAA,KAAF;AAASC,QAAAA;AAAT,OAAuB;;AAClC,UAAIA,OAAO,IAAID,KAAf,EAAsB;AAClB;AAAA;AAAK,UAAA,SAAS,EAAC,kBAAf;AAAA,iCACI;AAAK,YAAA,SAAS,EAAC,QAAf;AAAA,sBAAyBA;AAAzB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AAGH;AACJ,KARgC;;AAAA,SAUjCE,WAViC,GAUnB,SAA4B;AAAA,UAA3B;AAAEC,QAAAA,KAAF;AAASC,QAAAA,KAAT;AAAgBC,QAAAA;AAAhB,OAA2B;AACtC,YAAMC,SAAS,GAAI,SAAQD,IAAI,CAACL,KAAL,IAAcK,IAAI,CAACJ,OAAnB,GAA6B,OAA7B,GAAuC,EAAG,EAArE;AACA,0BACI;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA,gCACI;AAAA,oBAASG;AAAT;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,sBAAWD,KAAX;AAAkB,UAAA,YAAY,EAAC;AAA/B;AAAA;AAAA;AAAA;AAAA,gBAFJ,EAGK,KAAKJ,WAAL,CAAiBM,IAAjB,CAHL;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAOH,KAnBgC;AAAA;;AAqBjCE,EAAAA,QAAQ,CAACX,UAAD,EAAa;AACjBY,IAAAA,OAAO,CAACC,GAAR,CAAYb,UAAZ;AAEH;;AAEDc,EAAAA,MAAM,GAAG;AACL,wBACI;AAAM,MAAA,QAAQ,EAAE,KAAKC,KAAL,CAAWC,YAAX,CAAwB,KAAKL,QAA7B,CAAhB;AAAwD,MAAA,SAAS,EAAC,eAAlE;AAAA,8BACI,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,OAAZ;AAAoB,QAAA,SAAS,EAAE,KAAKL,WAApC;AAAiD,QAAA,KAAK,EAAC;AAAvD;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,aAAZ;AAA0B,QAAA,SAAS,EAAE,KAAKA,WAA1C;AAAuD,QAAA,KAAK,EAAC;AAA7D;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAQ,QAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAOH;;AAlCgC;;AAmCpC;;AAED,MAAMW,QAAQ,GAAIjB,UAAD,IAAgB;AAC7B,QAAMkB,MAAM,GAAG,EAAf;;AACA,MAAI,CAAClB,UAAU,CAACmB,KAAhB,EAAuB;AACnBD,IAAAA,MAAM,CAACC,KAAP,GAAe,8BAAf;AACH;;AACD,MAAI,CAACnB,UAAU,CAACoB,WAAhB,EAA6B;AACzBF,IAAAA,MAAM,CAACE,WAAP,GAAqB,oCAArB;AACH;;AACD,SAAOF,MAAP;AACH,CATD;;AAWA,eAAejB,SAAS,CAAC;AACrBoB,EAAAA,IAAI,EAAE,cADe;AAErBJ,EAAAA;AAFqB,CAAD,CAAT,CAGZf,YAHY,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { Field, formValues, reduxForm } from 'redux-form'\n\nclass StreamCreate extends Component {\n\n    renderError = ({ error, touched }) => {\n        if (touched && error) {\n            <div className='ui error message'>\n                <div className='header'>{error}</div>\n            </div>\n        }\n    }\n\n    renderInput = ({ input, label, meta }) => {\n        const className = `field ${meta.error && meta.touched ? 'error' : ''}`\n        return (\n            <div className='field error'>\n                <label >{label}</label>\n                <input {...input} autoComplete=\"off\" />\n                {this.renderError(meta)}\n            </div>\n        )\n    };\n\n    onSubmit(formValues) {\n        console.log(formValues)\n\n    };\n\n    render() {\n        return (\n            <form onSubmit={this.props.handleSubmit(this.onSubmit)} className='ui form error'>\n                <Field name='title' component={this.renderInput} label=\"Enter Title\" />\n                <Field name='description' component={this.renderInput} label=\"Enter Description\" />\n                <button className='ui button primary'>Submit</button>\n            </form>\n        );\n    };\n};\n\nconst validate = (formValues) => {\n    const errors = {};\n    if (!formValues.title) {\n        errors.title = \"You must enter a valid title\"\n    }\n    if (!formValues.description) {\n        errors.description = \"You must enter a valid description\"\n    }\n    return errors;\n};\n\nexport default reduxForm({\n    form: 'streamCreate',\n    validate\n})(StreamCreate);"]},"metadata":{},"sourceType":"module"}